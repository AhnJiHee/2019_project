/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.9
 * Generated at: 2019-02-08 04:15:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dao.APIExamMapGeocode;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\">\r\n");
      out.write("    <title>간단한 지도 표시하기</title>\r\n");
      out.write("    <script src=\"jquery-3.2.1.min.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=w98rrzv3zs\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=w98rrzv3zs&submodules=geocoder\"></script>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"center\" id=\"map\" style=\"width:400px;height:400px;\"></div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var map = new naver.maps.Map(\"map\", {\r\n");
      out.write("    center: new naver.maps.LatLng(37.3595316, 127.1052133),\r\n");
      out.write("    zoom: 10,\r\n");
      out.write("    mapTypeControl: true\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("var marker = new naver.maps.Marker({\r\n");
      out.write("    position: new naver.maps.LatLng(37.3595704, 127.105399),\r\n");
      out.write("    map: map\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("var infoWindow = new naver.maps.InfoWindow({\r\n");
      out.write("    anchorSkew: true\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("map.setCursor('pointer');\r\n");
      out.write("\r\n");
      out.write("// search by tm128 coordinate\r\n");
      out.write("/* function searchCoordinateToAddress(latlng) {\r\n");
      out.write("    var tm128 = naver.maps.TransCoord.fromLatLngToTM128(latlng);\r\n");
      out.write("\r\n");
      out.write("    infoWindow.close();\r\n");
      out.write("\r\n");
      out.write("    naver.maps.Service.reverseGeocode({\r\n");
      out.write("        location: tm128,\r\n");
      out.write("        coordType: naver.maps.Service.CoordType.TM128\r\n");
      out.write("    }, function(status, response) {\r\n");
      out.write("        if (status === naver.maps.Service.Status.ERROR) {\r\n");
      out.write("            return alert('Something Wrong!');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        var items = response.result.items,\r\n");
      out.write("            htmlAddresses = [];\r\n");
      out.write("\r\n");
      out.write("        for (var i=0, ii=items.length, item, addrType; i<ii; i++) {\r\n");
      out.write("            item = items[i];\r\n");
      out.write("            addrType = item.isRoadAddress ? '[도로명 주소]' : '[지번 주소]';\r\n");
      out.write("\r\n");
      out.write("            htmlAddresses.push((i+1) +'. '+ addrType +' '+ item.address);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        infoWindow.setContent([\r\n");
      out.write("                '<div style=\"padding:10px;min-width:200px;line-height:150%;\">',\r\n");
      out.write("                '<h4 style=\"margin-top:5px;\">검색 좌표</h4><br />',\r\n");
      out.write("                htmlAddresses.join('<br />'),\r\n");
      out.write("                '</div>'\r\n");
      out.write("            ].join('\\n'));\r\n");
      out.write("\r\n");
      out.write("        infoWindow.open(map, latlng);\r\n");
      out.write("    });\r\n");
      out.write("} */\r\n");
      out.write("\r\n");
      out.write("// result by latlng coordinate\r\n");
      out.write("function searchAddressToCoordinate(address) {\r\n");
      out.write("    naver.maps.Service.geocode({\r\n");
      out.write("        address: address\r\n");
      out.write("    }, function(status, response) {\r\n");
      out.write("        if (status === naver.maps.Service.Status.ERROR) {\r\n");
      out.write("            return alert('Something Wrong!');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        var item = response.result.items[0],\r\n");
      out.write("            addrType = item.isRoadAddress ? '[도로명 주소]' : '[지번 주소]',\r\n");
      out.write("            point = new naver.maps.Point(item.point.x, item.point.y);\r\n");
      out.write("\r\n");
      out.write("        infoWindow.setContent([\r\n");
      out.write("                '<div style=\"padding:10px;min-width:200px;line-height:150%;\">',\r\n");
      out.write("                '<h4 style=\"margin-top:5px;\">검색 주소 : '+ response.result.userquery +'</h4><br />',\r\n");
      out.write("                addrType +' '+ item.address +'<br />',\r\n");
      out.write("                '</div>'\r\n");
      out.write("            ].join('\\n'));\r\n");
      out.write("        \r\n");
      out.write("        map.setCenter(point);\r\n");
      out.write("        infoWindow.open(map, point);\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function initGeocoder() {\r\n");
      out.write("    map.addListener('click', function(e) {\r\n");
      out.write("        searchCoordinateToAddress(e.coord);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $('#address').on('keydown', function(e) {\r\n");
      out.write("        var keyCode = e.which;\r\n");
      out.write("\r\n");
      out.write("        if (keyCode === 13) { // Enter Key\r\n");
      out.write("            searchAddressToCoordinate($('#address').val());\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $('#submit').on('click', function(e) {\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        searchAddressToCoordinate($('#address').val());\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    searchAddressToCoordinate('정자동 178-1');\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("naver.maps.onJSContentLoaded = initGeocoder;\r\n");
      out.write("\r\n");
      out.write("naver.maps.Service.geocode({\r\n");
      out.write("    address: '불정로 6'\r\n");
      out.write("}, function(status, response) {\r\n");
      out.write("    if (status !== naver.maps.Service.Status.OK) {\r\n");
      out.write("        return alert('Something wrong!');\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var result = response.result, // 검색 결과의 컨테이너\r\n");
      out.write("        items = result.items; // 검색 결과의 배열\r\n");
      out.write("\t\r\n");
      out.write("    $(\"#result\").html(result)\r\n");
      out.write("    // do Something\r\n");
      out.write("    \r\n");
      out.write("    $(\"#execute\").on('click', function(){\r\n");
      out.write("\t    searchAddressToCoordinate($(\"#adress\").val());\t\r\n");
      out.write("    })\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<a id=\"result\"></a>\r\n");
      out.write("<input type=\"text\" id=\"adress\" placeholder=\"주소를 입력하세요\">\r\n");
      out.write("<input type=\"button\" id=\"execute\" value=\"검색\">\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
